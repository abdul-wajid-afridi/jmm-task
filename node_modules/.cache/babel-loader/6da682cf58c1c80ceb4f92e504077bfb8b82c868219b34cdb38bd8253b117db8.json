{"ast":null,"code":"var _jsxFileName = \"/Users/eapple/Desktop/Eccomerce/Eccomerce-2/frontend/src/DragAndDrop/SortDrag.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortDrag = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"SortDrag\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n};\n_c = SortDrag;\nexport default SortDrag;\n// import React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // fake data generator\n// const getItems = count =>\n//   Array.from({ length: count }, (v, k) => k).map(k => ({\n//     id: `item-${k}`,\n//     content: `item ${k}`,\n//   }));\n\n// // a little function to help us with reordering the result\n// const reorder = (list, startIndex, endIndex) => {\n//   const result = Array.from(list);\n//   const [removed] = result.splice(startIndex, 1);\n//   result.splice(endIndex, 0, removed);\n\n//   return result;\n// };\n\n// const grid = 8;\n\n// const getItemStyle = (isDragging, draggableStyle) => ({\n//   // some basic styles to make the items look a bit nicer\n//   userSelect: 'none',\n//   padding: grid * 2,\n//   margin: `0 ${grid}px 0 0`,\n\n//   // change background colour if dragging\n//   background: isDragging ? 'lightgreen' : 'grey',\n\n//   // styles we need to apply on draggables\n//   ...draggableStyle,\n// });\n\n// const getListStyle = isDraggingOver => ({\n//   background: isDraggingOver ? 'lightblue' : 'lightgrey',\n//   display: 'flex',\n//   padding: grid,\n//   overflow: 'auto',\n// });\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       items: getItems(6),\n//     };\n//     this.onDragEnd = this.onDragEnd.bind(this);\n//   }\n\n//   onDragEnd(result) {\n//     // dropped outside the list\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     const items = reorder(\n//       this.state.items,\n//       result.source.index,\n//       result.destination.index\n//     );\n\n//     this.setState({\n//       items,\n//     });\n//   }\n\n//   // Normally you would want to split things out into separate components.\n//   // But in this example everything is just done in one place for simplicity\n//   render() {\n//     return (\n//       <DragDropContext onDragEnd={this.onDragEnd}>\n//         <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n//           {(provided, snapshot) => (\n//             <div\n//               ref={provided.innerRef}\n//               style={getListStyle(snapshot.isDraggingOver)}\n//               {...provided.droppableProps}\n//             >\n//               {this.state.items.map((item, index) => (\n//                 <Draggable key={item.id} draggableId={item.id} index={index}>\n//                   {(provided, snapshot) => (\n//                     <div\n//                       ref={provided.innerRef}\n//                       {...provided.draggableProps}\n//                       {...provided.dragHandleProps}\n//                       style={getItemStyle(\n//                         snapshot.isDragging,\n//                         provided.draggableProps.style\n//                       )}\n//                     >\n//                       {item.content}\n//                     </div>\n//                   )}\n//                 </Draggable>\n//               ))}\n//               {provided.placeholder}\n//             </div>\n//           )}\n//         </Droppable>\n//       </DragDropContext>\n//     );\n//   }\n// }\n// export default App\n\n// // import React, { Component } from \"react\";\n// // import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// // // fake data generator\n// // const getItems = (count) =>\n// //   Array.from({ length: count }, (v, k) => k).map((k) => ({\n// //     id: `item-${k}`,\n// //     content: `item ${k}`,\n// //   }));\n\n// // // a little function to help us with reordering the result\n// // const reorder = (list, startIndex, endIndex) => {\n// //   const result = Array.from(list);\n// //   const [removed] = result.splice(startIndex, 1);\n// //   result.splice(endIndex, 0, removed);\n\n// //   return result;\n// // };\n\n// // const grid = 8;\n\n// // const getItemStyle = (isDragging, draggableStyle) => ({\n// //   // some basic styles to make the items look a bit nicer\n// //   userSelect: \"none\",\n// //   padding: grid * 2,\n// //   margin: `0 0 ${grid}px 0`,\n\n// //   // change background colour if dragging\n// //   background: isDragging ? \"lightgreen\" : \"grey\",\n\n// //   // styles we need to apply on draggables\n// //   ...draggableStyle,\n// // });\n\n// // const getListStyle = (isDraggingOver) => ({\n// //   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n// //   padding: grid,\n// //   width: 250,\n// // });\n\n// // class SortDrag extends Component {\n// //   constructor(props) {\n// //     super(props);\n// //     this.state = {\n// //       items: getItems(10),\n// //     };\n// //     this.onDragEnd = this.onDragEnd.bind(this);\n// //   }\n\n// //   onDragEnd(result) {\n// //     // dropped outside the list\n// //     if (!result.destination) {\n// //       return;\n// //     }\n\n// //     const items = reorder(\n// //       this.state.items,\n// //       result.source.index,\n// //       result.destination.index\n// //     );\n\n// //     this.setState({\n// //       items,\n// //     });\n// //   }\n\n// //   // Normally you would want to split things out into separate components.\n// //   // But in this example everything is just done in one place for simplicity\n// //   render() {\n// //     return (\n// //       <DragDropContext onDragEnd={this.onDragEnd}>\n// //         <Droppable droppableId=\"droppable\">\n// //           {(provided, snapshot) => (\n// //             <div\n// //               {...provided.droppableProps}\n// //               ref={provided.innerRef}\n// //               style={getListStyle(snapshot.isDraggingOver)}\n// //             >\n// //               {this.state.items.map((item, index) => (\n// //                 <Draggable key={item.id} draggableId={item.id} index={index}>\n// //                   {(provided, snapshot) => (\n// //                     <div\n// //                       ref={provided.innerRef}\n// //                       {...provided.draggableProps}\n// //                       {...provided.dragHandleProps}\n// //                       style={getItemStyle(\n// //                         snapshot.isDragging,\n// //                         provided.draggableProps.style\n// //                       )}\n// //                     >\n// //                       {item.content}\n// //                     </div>\n// //                   )}\n// //                 </Draggable>\n// //               ))}\n// //               {provided.placeholder}\n// //             </div>\n// //           )}\n// //         </Droppable>\n// //       </DragDropContext>\n// //     );\n// //   }\n// // }\n\n// // export default SortDrag;\n\n// import React, { useState } from \"react\";\n// import styled from \"@emotion/styled\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// const initial = Array.from({ length: 10 }, (v, k) => k).map((k) => {\n//   const custom = {\n//     id: `id-${k}`,\n//     content: `Quote ${k}`,\n//   };\n\n//   return custom;\n// });\n\n// const grid = 8;\n// const reorder = (list, startIndex, endIndex) => {\n//   const result = Array.from(list);\n//   const [removed] = result.splice(startIndex, 1);\n//   result.splice(endIndex, 0, removed);\n\n//   return result;\n// };\n\n// const QuoteItem = styled.div`\n//   width: 200px;\n//   border: 1px solid grey;\n//   margin-bottom: ${grid}px;\n//   background-color: lightblue;\n//   padding: ${grid}px;\n// `;\n\n// function Quote({ quote, index }) {\n//   return (\n//     <Draggable draggableId={quote.id} index={index}>\n//       {(provided) => (\n//         <QuoteItem\n//           ref={provided.innerRef}\n//           {...provided.draggableProps}\n//           {...provided.dragHandleProps}\n//         >\n//           {quote.content}\n//         </QuoteItem>\n//       )}\n//     </Draggable>\n//   );\n// }\n\n// const QuoteList = React.memo(function QuoteList({ quotes }) {\n//   return quotes.map((quote, index) => (\n//     <Quote quote={quote} index={index} key={quote.id} />\n//   ));\n// });\n\n// function QuoteApp() {\n//   const [state, setState] = useState({ quotes: initial });\n\n//   function onDragEnd(result) {\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     if (result.destination.index === result.source.index) {\n//       return;\n//     }\n\n//     const quotes = reorder(\n//       state.quotes,\n//       result.source.index,\n//       result.destination.index\n//     );\n\n//     setState({ quotes });\n//   }\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <Droppable droppableId=\"list\">\n//         {(provided) => (\n//           <div ref={provided.innerRef} {...provided.droppableProps}>\n//             <QuoteList quotes={state.quotes} />\n//             {provided.placeholder}\n//           </div>\n//         )}\n//       </Droppable>\n//     </DragDropContext>\n//   );\n// }\n// export default QuoteApp;\nvar _c;\n$RefreshReg$(_c, \"SortDrag\");","map":{"version":3,"names":["React","SortDrag"],"sources":["/Users/eapple/Desktop/Eccomerce/Eccomerce-2/frontend/src/DragAndDrop/SortDrag.jsx"],"sourcesContent":["import React from \"react\";\n\nconst SortDrag = () => {\n  return <div>SortDrag</div>;\n};\n\nexport default SortDrag;\n// import React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // fake data generator\n// const getItems = count =>\n//   Array.from({ length: count }, (v, k) => k).map(k => ({\n//     id: `item-${k}`,\n//     content: `item ${k}`,\n//   }));\n\n// // a little function to help us with reordering the result\n// const reorder = (list, startIndex, endIndex) => {\n//   const result = Array.from(list);\n//   const [removed] = result.splice(startIndex, 1);\n//   result.splice(endIndex, 0, removed);\n\n//   return result;\n// };\n\n// const grid = 8;\n\n// const getItemStyle = (isDragging, draggableStyle) => ({\n//   // some basic styles to make the items look a bit nicer\n//   userSelect: 'none',\n//   padding: grid * 2,\n//   margin: `0 ${grid}px 0 0`,\n\n//   // change background colour if dragging\n//   background: isDragging ? 'lightgreen' : 'grey',\n\n//   // styles we need to apply on draggables\n//   ...draggableStyle,\n// });\n\n// const getListStyle = isDraggingOver => ({\n//   background: isDraggingOver ? 'lightblue' : 'lightgrey',\n//   display: 'flex',\n//   padding: grid,\n//   overflow: 'auto',\n// });\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       items: getItems(6),\n//     };\n//     this.onDragEnd = this.onDragEnd.bind(this);\n//   }\n\n//   onDragEnd(result) {\n//     // dropped outside the list\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     const items = reorder(\n//       this.state.items,\n//       result.source.index,\n//       result.destination.index\n//     );\n\n//     this.setState({\n//       items,\n//     });\n//   }\n\n//   // Normally you would want to split things out into separate components.\n//   // But in this example everything is just done in one place for simplicity\n//   render() {\n//     return (\n//       <DragDropContext onDragEnd={this.onDragEnd}>\n//         <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n//           {(provided, snapshot) => (\n//             <div\n//               ref={provided.innerRef}\n//               style={getListStyle(snapshot.isDraggingOver)}\n//               {...provided.droppableProps}\n//             >\n//               {this.state.items.map((item, index) => (\n//                 <Draggable key={item.id} draggableId={item.id} index={index}>\n//                   {(provided, snapshot) => (\n//                     <div\n//                       ref={provided.innerRef}\n//                       {...provided.draggableProps}\n//                       {...provided.dragHandleProps}\n//                       style={getItemStyle(\n//                         snapshot.isDragging,\n//                         provided.draggableProps.style\n//                       )}\n//                     >\n//                       {item.content}\n//                     </div>\n//                   )}\n//                 </Draggable>\n//               ))}\n//               {provided.placeholder}\n//             </div>\n//           )}\n//         </Droppable>\n//       </DragDropContext>\n//     );\n//   }\n// }\n// export default App\n\n// // import React, { Component } from \"react\";\n// // import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// // // fake data generator\n// // const getItems = (count) =>\n// //   Array.from({ length: count }, (v, k) => k).map((k) => ({\n// //     id: `item-${k}`,\n// //     content: `item ${k}`,\n// //   }));\n\n// // // a little function to help us with reordering the result\n// // const reorder = (list, startIndex, endIndex) => {\n// //   const result = Array.from(list);\n// //   const [removed] = result.splice(startIndex, 1);\n// //   result.splice(endIndex, 0, removed);\n\n// //   return result;\n// // };\n\n// // const grid = 8;\n\n// // const getItemStyle = (isDragging, draggableStyle) => ({\n// //   // some basic styles to make the items look a bit nicer\n// //   userSelect: \"none\",\n// //   padding: grid * 2,\n// //   margin: `0 0 ${grid}px 0`,\n\n// //   // change background colour if dragging\n// //   background: isDragging ? \"lightgreen\" : \"grey\",\n\n// //   // styles we need to apply on draggables\n// //   ...draggableStyle,\n// // });\n\n// // const getListStyle = (isDraggingOver) => ({\n// //   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n// //   padding: grid,\n// //   width: 250,\n// // });\n\n// // class SortDrag extends Component {\n// //   constructor(props) {\n// //     super(props);\n// //     this.state = {\n// //       items: getItems(10),\n// //     };\n// //     this.onDragEnd = this.onDragEnd.bind(this);\n// //   }\n\n// //   onDragEnd(result) {\n// //     // dropped outside the list\n// //     if (!result.destination) {\n// //       return;\n// //     }\n\n// //     const items = reorder(\n// //       this.state.items,\n// //       result.source.index,\n// //       result.destination.index\n// //     );\n\n// //     this.setState({\n// //       items,\n// //     });\n// //   }\n\n// //   // Normally you would want to split things out into separate components.\n// //   // But in this example everything is just done in one place for simplicity\n// //   render() {\n// //     return (\n// //       <DragDropContext onDragEnd={this.onDragEnd}>\n// //         <Droppable droppableId=\"droppable\">\n// //           {(provided, snapshot) => (\n// //             <div\n// //               {...provided.droppableProps}\n// //               ref={provided.innerRef}\n// //               style={getListStyle(snapshot.isDraggingOver)}\n// //             >\n// //               {this.state.items.map((item, index) => (\n// //                 <Draggable key={item.id} draggableId={item.id} index={index}>\n// //                   {(provided, snapshot) => (\n// //                     <div\n// //                       ref={provided.innerRef}\n// //                       {...provided.draggableProps}\n// //                       {...provided.dragHandleProps}\n// //                       style={getItemStyle(\n// //                         snapshot.isDragging,\n// //                         provided.draggableProps.style\n// //                       )}\n// //                     >\n// //                       {item.content}\n// //                     </div>\n// //                   )}\n// //                 </Draggable>\n// //               ))}\n// //               {provided.placeholder}\n// //             </div>\n// //           )}\n// //         </Droppable>\n// //       </DragDropContext>\n// //     );\n// //   }\n// // }\n\n// // export default SortDrag;\n\n// import React, { useState } from \"react\";\n// import styled from \"@emotion/styled\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// const initial = Array.from({ length: 10 }, (v, k) => k).map((k) => {\n//   const custom = {\n//     id: `id-${k}`,\n//     content: `Quote ${k}`,\n//   };\n\n//   return custom;\n// });\n\n// const grid = 8;\n// const reorder = (list, startIndex, endIndex) => {\n//   const result = Array.from(list);\n//   const [removed] = result.splice(startIndex, 1);\n//   result.splice(endIndex, 0, removed);\n\n//   return result;\n// };\n\n// const QuoteItem = styled.div`\n//   width: 200px;\n//   border: 1px solid grey;\n//   margin-bottom: ${grid}px;\n//   background-color: lightblue;\n//   padding: ${grid}px;\n// `;\n\n// function Quote({ quote, index }) {\n//   return (\n//     <Draggable draggableId={quote.id} index={index}>\n//       {(provided) => (\n//         <QuoteItem\n//           ref={provided.innerRef}\n//           {...provided.draggableProps}\n//           {...provided.dragHandleProps}\n//         >\n//           {quote.content}\n//         </QuoteItem>\n//       )}\n//     </Draggable>\n//   );\n// }\n\n// const QuoteList = React.memo(function QuoteList({ quotes }) {\n//   return quotes.map((quote, index) => (\n//     <Quote quote={quote} index={index} key={quote.id} />\n//   ));\n// });\n\n// function QuoteApp() {\n//   const [state, setState] = useState({ quotes: initial });\n\n//   function onDragEnd(result) {\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     if (result.destination.index === result.source.index) {\n//       return;\n//     }\n\n//     const quotes = reorder(\n//       state.quotes,\n//       result.source.index,\n//       result.destination.index\n//     );\n\n//     setState({ quotes });\n//   }\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <Droppable droppableId=\"list\">\n//         {(provided) => (\n//           <div ref={provided.innerRef} {...provided.droppableProps}>\n//             <QuoteList quotes={state.quotes} />\n//             {provided.placeholder}\n//           </div>\n//         )}\n//       </Droppable>\n//     </DragDropContext>\n//   );\n// }\n// export default QuoteApp;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,QAAQ,GAAG,MAAM;EACrB,oBAAO;IAAA,UAAK;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAM;AAC5B,CAAC;AAAC,KAFIA,QAAQ;AAId,eAAeA,QAAQ;AACv},"metadata":{},"sourceType":"module","externalDependencies":[]}