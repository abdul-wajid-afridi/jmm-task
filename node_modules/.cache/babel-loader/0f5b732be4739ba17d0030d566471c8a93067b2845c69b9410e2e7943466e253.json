{"ast":null,"code":"var _jsxFileName = \"/Users/eapple/Desktop/Eccomerce/Eccomerce-2/frontend/src/DragAndDrop/SortDrag.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getItems = count => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k}`,\n  content: `item ${k}`\n}));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\nconst grid = 8;\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 ${grid}px 0 0`,\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\"\n});\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(6)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n    const items = reorder(this.state.items, result.source.index, result.destination.index);\n    this.setState({\n      items\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable\",\n        direction: \"horizontal\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          ...provided.droppableProps,\n          children: [this.state.items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 21\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;\n\n// // import React, { Component } from \"react\";\n// // import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// // // fake data generator\n// // const getItems = (count) =>\n// //   Array.from({ length: count }, (v, k) => k).map((k) => ({\n// //     id: `item-${k}`,\n// //     content: `item ${k}`,\n// //   }));\n\n// // // a little function to help us with reordering the result\n// // const reorder = (list, startIndex, endIndex) => {\n// //   const result = Array.from(list);\n// //   const [removed] = result.splice(startIndex, 1);\n// //   result.splice(endIndex, 0, removed);\n\n// //   return result;\n// // };\n\n// // const grid = 8;\n\n// // const getItemStyle = (isDragging, draggableStyle) => ({\n// //   // some basic styles to make the items look a bit nicer\n// //   userSelect: \"none\",\n// //   padding: grid * 2,\n// //   margin: `0 0 ${grid}px 0`,\n\n// //   // change background colour if dragging\n// //   background: isDragging ? \"lightgreen\" : \"grey\",\n\n// //   // styles we need to apply on draggables\n// //   ...draggableStyle,\n// // });\n\n// // const getListStyle = (isDraggingOver) => ({\n// //   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n// //   padding: grid,\n// //   width: 250,\n// // });\n\n// // class SortDrag extends Component {\n// //   constructor(props) {\n// //     super(props);\n// //     this.state = {\n// //       items: getItems(10),\n// //     };\n// //     this.onDragEnd = this.onDragEnd.bind(this);\n// //   }\n\n// //   onDragEnd(result) {\n// //     // dropped outside the list\n// //     if (!result.destination) {\n// //       return;\n// //     }\n\n// //     const items = reorder(\n// //       this.state.items,\n// //       result.source.index,\n// //       result.destination.index\n// //     );\n\n// //     this.setState({\n// //       items,\n// //     });\n// //   }\n\n// //   // Normally you would want to split things out into separate components.\n// //   // But in this example everything is just done in one place for simplicity\n// //   render() {\n// //     return (\n// //       <DragDropContext onDragEnd={this.onDragEnd}>\n// //         <Droppable droppableId=\"droppable\">\n// //           {(provided, snapshot) => (\n// //             <div\n// //               {...provided.droppableProps}\n// //               ref={provided.innerRef}\n// //               style={getListStyle(snapshot.isDraggingOver)}\n// //             >\n// //               {this.state.items.map((item, index) => (\n// //                 <Draggable key={item.id} draggableId={item.id} index={index}>\n// //                   {(provided, snapshot) => (\n// //                     <div\n// //                       ref={provided.innerRef}\n// //                       {...provided.draggableProps}\n// //                       {...provided.dragHandleProps}\n// //                       style={getItemStyle(\n// //                         snapshot.isDragging,\n// //                         provided.draggableProps.style\n// //                       )}\n// //                     >\n// //                       {item.content}\n// //                     </div>\n// //                   )}\n// //                 </Draggable>\n// //               ))}\n// //               {provided.placeholder}\n// //             </div>\n// //           )}\n// //         </Droppable>\n// //       </DragDropContext>\n// //     );\n// //   }\n// // }\n\n// // export default SortDrag;\n\n// import React, { useState } from \"react\";\n// import styled from \"@emotion/styled\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// const initial = Array.from({ length: 10 }, (v, k) => k).map((k) => {\n//   const custom = {\n//     id: `id-${k}`,\n//     content: `Quote ${k}`,\n//   };\n\n//   return custom;\n// });\n\n// const grid = 8;\n// const reorder = (list, startIndex, endIndex) => {\n//   const result = Array.from(list);\n//   const [removed] = result.splice(startIndex, 1);\n//   result.splice(endIndex, 0, removed);\n\n//   return result;\n// };\n\n// const QuoteItem = styled.div`\n//   width: 200px;\n//   border: 1px solid grey;\n//   margin-bottom: ${grid}px;\n//   background-color: lightblue;\n//   padding: ${grid}px;\n// `;\n\n// function Quote({ quote, index }) {\n//   return (\n//     <Draggable draggableId={quote.id} index={index}>\n//       {(provided) => (\n//         <QuoteItem\n//           ref={provided.innerRef}\n//           {...provided.draggableProps}\n//           {...provided.dragHandleProps}\n//         >\n//           {quote.content}\n//         </QuoteItem>\n//       )}\n//     </Draggable>\n//   );\n// }\n\n// const QuoteList = React.memo(function QuoteList({ quotes }) {\n//   return quotes.map((quote, index) => (\n//     <Quote quote={quote} index={index} key={quote.id} />\n//   ));\n// });\n\n// function QuoteApp() {\n//   const [state, setState] = useState({ quotes: initial });\n\n//   function onDragEnd(result) {\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     if (result.destination.index === result.source.index) {\n//       return;\n//     }\n\n//     const quotes = reorder(\n//       state.quotes,\n//       result.source.index,\n//       result.destination.index\n//     );\n\n//     setState({ quotes });\n//   }\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <Droppable droppableId=\"list\">\n//         {(provided) => (\n//           <div ref={provided.innerRef} {...provided.droppableProps}>\n//             <QuoteList quotes={state.quotes} />\n//             {provided.placeholder}\n//           </div>\n//         )}\n//       </Droppable>\n//     </DragDropContext>\n//   );\n// }\n// export default QuoteApp;","map":{"version":3,"names":["React","Component","ReactDOM","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","display","overflow","App","constructor","props","state","items","onDragEnd","bind","destination","source","index","setState","render","provided","snapshot","innerRef","droppableProps","item","draggableProps","dragHandleProps","style","placeholder"],"sources":["/Users/eapple/Desktop/Eccomerce/Eccomerce-2/frontend/src/DragAndDrop/SortDrag.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = (count) =>\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\n    id: `item-${k}`,\n    content: `item ${k}`,\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 ${grid}px 0 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\",\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(6),\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items,\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n              {...provided.droppableProps}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\nexport default App;\n\n// // import React, { Component } from \"react\";\n// // import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// // // fake data generator\n// // const getItems = (count) =>\n// //   Array.from({ length: count }, (v, k) => k).map((k) => ({\n// //     id: `item-${k}`,\n// //     content: `item ${k}`,\n// //   }));\n\n// // // a little function to help us with reordering the result\n// // const reorder = (list, startIndex, endIndex) => {\n// //   const result = Array.from(list);\n// //   const [removed] = result.splice(startIndex, 1);\n// //   result.splice(endIndex, 0, removed);\n\n// //   return result;\n// // };\n\n// // const grid = 8;\n\n// // const getItemStyle = (isDragging, draggableStyle) => ({\n// //   // some basic styles to make the items look a bit nicer\n// //   userSelect: \"none\",\n// //   padding: grid * 2,\n// //   margin: `0 0 ${grid}px 0`,\n\n// //   // change background colour if dragging\n// //   background: isDragging ? \"lightgreen\" : \"grey\",\n\n// //   // styles we need to apply on draggables\n// //   ...draggableStyle,\n// // });\n\n// // const getListStyle = (isDraggingOver) => ({\n// //   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n// //   padding: grid,\n// //   width: 250,\n// // });\n\n// // class SortDrag extends Component {\n// //   constructor(props) {\n// //     super(props);\n// //     this.state = {\n// //       items: getItems(10),\n// //     };\n// //     this.onDragEnd = this.onDragEnd.bind(this);\n// //   }\n\n// //   onDragEnd(result) {\n// //     // dropped outside the list\n// //     if (!result.destination) {\n// //       return;\n// //     }\n\n// //     const items = reorder(\n// //       this.state.items,\n// //       result.source.index,\n// //       result.destination.index\n// //     );\n\n// //     this.setState({\n// //       items,\n// //     });\n// //   }\n\n// //   // Normally you would want to split things out into separate components.\n// //   // But in this example everything is just done in one place for simplicity\n// //   render() {\n// //     return (\n// //       <DragDropContext onDragEnd={this.onDragEnd}>\n// //         <Droppable droppableId=\"droppable\">\n// //           {(provided, snapshot) => (\n// //             <div\n// //               {...provided.droppableProps}\n// //               ref={provided.innerRef}\n// //               style={getListStyle(snapshot.isDraggingOver)}\n// //             >\n// //               {this.state.items.map((item, index) => (\n// //                 <Draggable key={item.id} draggableId={item.id} index={index}>\n// //                   {(provided, snapshot) => (\n// //                     <div\n// //                       ref={provided.innerRef}\n// //                       {...provided.draggableProps}\n// //                       {...provided.dragHandleProps}\n// //                       style={getItemStyle(\n// //                         snapshot.isDragging,\n// //                         provided.draggableProps.style\n// //                       )}\n// //                     >\n// //                       {item.content}\n// //                     </div>\n// //                   )}\n// //                 </Draggable>\n// //               ))}\n// //               {provided.placeholder}\n// //             </div>\n// //           )}\n// //         </Droppable>\n// //       </DragDropContext>\n// //     );\n// //   }\n// // }\n\n// // export default SortDrag;\n\n// import React, { useState } from \"react\";\n// import styled from \"@emotion/styled\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// const initial = Array.from({ length: 10 }, (v, k) => k).map((k) => {\n//   const custom = {\n//     id: `id-${k}`,\n//     content: `Quote ${k}`,\n//   };\n\n//   return custom;\n// });\n\n// const grid = 8;\n// const reorder = (list, startIndex, endIndex) => {\n//   const result = Array.from(list);\n//   const [removed] = result.splice(startIndex, 1);\n//   result.splice(endIndex, 0, removed);\n\n//   return result;\n// };\n\n// const QuoteItem = styled.div`\n//   width: 200px;\n//   border: 1px solid grey;\n//   margin-bottom: ${grid}px;\n//   background-color: lightblue;\n//   padding: ${grid}px;\n// `;\n\n// function Quote({ quote, index }) {\n//   return (\n//     <Draggable draggableId={quote.id} index={index}>\n//       {(provided) => (\n//         <QuoteItem\n//           ref={provided.innerRef}\n//           {...provided.draggableProps}\n//           {...provided.dragHandleProps}\n//         >\n//           {quote.content}\n//         </QuoteItem>\n//       )}\n//     </Draggable>\n//   );\n// }\n\n// const QuoteList = React.memo(function QuoteList({ quotes }) {\n//   return quotes.map((quote, index) => (\n//     <Quote quote={quote} index={index} key={quote.id} />\n//   ));\n// });\n\n// function QuoteApp() {\n//   const [state, setState] = useState({ quotes: initial });\n\n//   function onDragEnd(result) {\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     if (result.destination.index === result.source.index) {\n//       return;\n//     }\n\n//     const quotes = reorder(\n//       state.quotes,\n//       result.source.index,\n//       result.destination.index\n//     );\n\n//     setState({ quotes });\n//   }\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <Droppable droppableId=\"list\">\n//         {(provided) => (\n//           <div ref={provided.innerRef} {...provided.droppableProps}>\n//             <QuoteList quotes={state.quotes} />\n//             {provided.placeholder}\n//           </div>\n//         )}\n//       </Droppable>\n//     </DragDropContext>\n//   );\n// }\n// export default QuoteApp;\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}